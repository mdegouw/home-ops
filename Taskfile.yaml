---
version: "3"

vars:
  PYTHON_BIN: python3
  BOOTSTRAP_DIR: "{{.ROOT_DIR}}/bootstrap"
  ANSIBLE_DIR: "{{.ROOT_DIR}}/ansible"
  KUBERNETES_DIR: "{{.ROOT_DIR}}/kubernetes"

env:
  KUBECONFIG: "{{.ROOT_DIR}}/kubeconfig"
  SOPS_AGE_KEY_FILE: "{{.ROOT_DIR}}/age.key"
  PATH: "{{.ROOT_DIR}}/.venv/bin:$PATH"
  VIRTUAL_ENV: "{{.ROOT_DIR}}/.venv"
  ANSIBLE_COLLECTIONS_PATH: "{{.ROOT_DIR}}/.venv/galaxy"
  ANSIBLE_ROLES_PATH: "{{.ROOT_DIR}}/.venv/galaxy/ansible_roles"
  ANSIBLE_VARS_ENABLED: "host_group_vars,community.sops.sops"
  K8S_AUTH_KUBECONFIG: "{{.ROOT_DIR}}/kubeconfig"

includes:
  ansible: .taskfiles/AnsibleTasks.yaml
  brew: .taskfiles/BrewTasks.yaml
  cluster: .taskfiles/ClusterTasks.yaml
  volsync: .taskfiles/VolSync/Tasks.yaml

tasks:

  default: task -l

  deps:
    desc: Create a Python virtual env and install required packages
    cmds:
      - "{{.PYTHON_BIN}} -m venv {{.ROOT_DIR}}/.venv"
      - .venv/bin/python3 -m pip install --upgrade pip setuptools wheel
      - .venv/bin/python3 -m pip install --upgrade --requirement "{{.ROOT_DIR}}/requirements.txt"
      - .venv/bin/ansible-galaxy install --role-file "{{.ROOT_DIR}}/requirements.yaml" --force

  init:
    desc: Initialize configuration files
    dir: "{{.BOOTSTRAP_DIR}}"
    cmds:
      - cp -n vars/addons.sample.yaml vars/addons.yaml
      - cp -n vars/config.sample.yaml vars/config.yaml
      - cmd: echo "=== Configuration files copied ==="
        silent: true
      - cmd: echo "Proceed with updating the configuration files..."
        silent: true
      - cmd: echo "{{.BOOTSTRAP_DIR}}/vars/config.yaml"
        silent: true
      - cmd: echo "{{.BOOTSTRAP_DIR}}/vars/addons.yaml"
        silent: true
    status:
      - test -f "{{.BOOTSTRAP_DIR}}/vars/addons.yaml"
      - test -f "{{.BOOTSTRAP_DIR}}/vars/config.yaml"

  configure:
    desc: Configure repository from Ansible vars
    dir: "{{.BOOTSTRAP_DIR}}"
    cmd: ansible-playbook configure.yaml
    env:
      ANSIBLE_DISPLAY_SKIPPED_HOSTS: "false"

  mount-volume:
    desc: Mount a PersistentVolumeClaim to a temporary pod
    interactive: true
    vars:
      claim: '{{ or .claim (fail "PersistentVolumeClaim `claim` is required") }}'
      namespace: '{{.namespace | default "default"}}'
    cmd: |
      kubectl run -n {{.namespace}} debug-{{.claim}} -i --tty --rm --image=null --privileged --overrides='
        {
          "apiVersion": "v1",
          "spec": {
            "containers": [
              {
                "name": "debug",
                "image": "ghcr.io/onedr0p/alpine:rolling",
                "command": ["/bin/bash"],
                "stdin": true,
                "stdinOnce": true,
                "tty": true,
                "volumeMounts": [
                  {
                    "name": "config",
                    "mountPath": "/config"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "config",
                "persistentVolumeClaim": {
                  "claimName": "{{.claim}}"
                }
              }
            ],
            "restartPolicy": "Never"
          }
        }'
    preconditions:
      - kubectl -n {{.namespace}} get pvc {{.claim}}

  # https://github.com/fluxcd/helm-controller/issues/644
  "644":
    cmds:
      - kubectl -n {{.namespace}} delete secret -l owner=helm,name={{.release}},status=pending-upgrade
      - flux -n {{.namespace}} reconcile hr {{.release}}
    vars:
      release: '{{ or .release (fail "HelmRelease `release` is required") }}'
      namespace: '{{.namespace | default "default"}}'
    preconditions:
      - flux -n {{.namespace}} get hr {{.release}}
